{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Free Language Learning Toolkit"},{"location":"#overview","title":"Overview","text":"<p><code>gogadget</code> is a free toolkit for producing immersion and priming materials for language learning.</p> <ul> <li>It tries to solve the problem that many of the most powerful tools available are hard to install, difficult to use or require lots of effort to configure for optimal results.</li> <li>It is capable of downloading audio and video files, automatically transcribing subtitles from videos and podcasts, and automatically producing filtered Anki decks with sentence audio / translations / screenshots / definitions.</li> </ul>"},{"location":"#video-tutorial","title":"Video tutorial","text":"<p>Click here to view the video on YouTube if it does not load above.</p>"},{"location":"#useful-links","title":"Useful links","text":"<ul> <li>Installation instructions</li> <li>Example commands</li> <li>Detailed command reference</li> <li>Video tutorial</li> <li>Getting help with problems</li> </ul>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Simple, well documented interface that is consistent across each of its tools.</li> <li>Download video, audio and subtitle files.</li> <li>Automatic generation of subtitles from video and audio files.</li> <li>Produce filtered Anki decks from subtitles that:<ul> <li>Contain images and sentence audio from the source video / audio files.</li> <li>Automatically filter out common and known words to reduce Anki review load.</li> <li>Prioritises words that are the most frequent in the source media.</li> <li>Include automatic translations of sentences and definitions of words.</li> <li>Can be built for an individual episode or a whole season.</li> </ul> </li> <li>Create word frequency analyses for priming purposes.</li> <li>One click installer for Windows and simple installation steps for macOS and Linux.</li> <li>Ability to save defaults so that commands can be kept as short and memorable as possible.</li> <li>It supports 19 languages fully with partial support for many more.</li> <li>Once you have installed the resources for your language, all modules apart from <code>gogadget download</code> are fully offline. This makes it useful for travelling or for processing personal conversations as there is no server involved.</li> </ul>"},{"location":"#why-is-gogadget-free","title":"Why is <code>gogadget</code> free?","text":"<p><code>gogadget</code> is free software, both in terms of \"free beer\" and \"freedom\".</p> <p>You can therefore run the program as you wish, for any purpose, provided that you comply with the terms of the license (AGPLv3-or-later). This means that, theoretically, you could even modify it and distribute your own version (even though I would personally much rather that you submit a pull request to improve this version!) The main practical restriction of AGPLv3 is that you need to license your version under these same terms, including making your source code available to your users so that everyone can benefit from it.</p> <p>Why free:</p> <ol> <li>I have greatly benefited from other pieces of free software such as the incredible Anki. It therefore only feels right to give back in the same manner.</li> <li>There are far too many pieces of software that try to lock you in, force subscriptions on you, steal your data, etc. I didn't want to create another one!</li> <li>I don't run any servers for the application so the only real cost is my time. Therefore, I don't need to charge.</li> <li>I hope that this can be a platform that others can build upon and therefore continue the cycle of creating high quality tools that anyone can use and tweak.</li> </ol>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>gogadget is Copyright \u00a9 2024 Jonathan Fox.</p> <p>This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/.</p> <p>All materials in this repository are covered by the aforementioned license, unless specifically noted below:</p> <ul> <li>src/gogadget/ytdlp_cli_to_api.py has been directly reproduced from yt-dlp's github page (license) without modification.</li> <li>The Windows installer bundles the binaries for both FFMPEG (license) and uv (license).</li> <li>The Bootstrap framework javascript and CSS files stored within src/gogadget/resources/html/bootstrap have been directly reproduced without modification (license).</li> <li>Portions of src/gogadget/resources/html/anki/ have been based upon the formatting of Refold's excellent decks. These are APLGv3 licensed, based upon the included code from Ankitects (license). Please see the individual source files for specific licensing information.</li> </ul> <p><code>LICENSE</code> files for each of the python dependencies will be included with the installation. For convenience, you can view an auto-generated table of each of the licenses and authors here.</p>"},{"location":"developer/building/","title":"Building","text":""},{"location":"developer/building/#github-actions","title":"Github actions","text":"<p>On every commit, there is a github action that rebuilds the documentation website on each commit.</p> <p>In addition to the documentation, on tag commits, the python wheel will be:</p> <ul> <li>Built</li> <li>Uploaded to PyPi &amp; TestPyPi</li> <li>Signed and added to a new Github release</li> </ul> <p>Note that the Windows build is not automatically created. This is currently a manual process.</p>"},{"location":"developer/building/#manual-build","title":"Manual build","text":""},{"location":"developer/building/#required-packages","title":"Required packages","text":"<p><code>uv</code> is used to build the packages and <code>Innosetup</code> is used to build the Windows installer.</p>"},{"location":"developer/building/#required-binaries-windows-builds-only","title":"Required binaries (Windows builds only)","text":"<p>The installers use <code>uv</code> to run the tool in its own virtual environment and the only non-Python runtime dependency is <code>ffmpeg</code>.</p>"},{"location":"developer/building/#settings-things-up","title":"Settings things up","text":"<p>The following assumes building on Windows so that the Windows installer can be created in addition to the multi-platform wheel. If you are building on mac / linux, you can skip steps 3 and 4.</p> <ol> <li>Set the version number in pyproject.toml</li> <li>Set the version number in install/gogadget_windows.iss</li> <li>[Windows only] Make sure that <code>uv</code> and <code>innosetup</code> are installed and in path. (innosetup isn't by default, you will need to add the root innosetup directory that is located in program files)</li> <li>[Windows only] Download latest windows builds of <code>ffmpeg</code> and <code>uv</code> and put the binaries directly in install/bin/</li> </ol>"},{"location":"developer/building/#build-commands-windows","title":"Build commands (Windows)","text":"<p>These commands are for Bash on Windows, you will need to convert them to whatever shell / platform you are using.</p> install/windows_build.sh<pre><code>#!/bin/bash\n\n# Clear out any wheels and existing installers that we have\nrm -f dist/* &amp;&amp; rm -f install/bin/*.whl\n\n# uv lock to create a record of the dependencies\nuv lock\n\n# Build new wheel and copy to bin folder\nuv build\ncp dist/*.whl install/bin/\n\n# Build windows installer and move to dist folder\niscc install/gogadget_windows.iss\n</code></pre>"},{"location":"developer/building/#documentation","title":"Documentation","text":""},{"location":"developer/building/#mkdocs-material","title":"mkdocs-material","text":"<p>The documentation uses <code>mkdocs-material</code> and related plugins. It also uses <code>typer</code> to generate the command reference page. The required packages are installed by running:</p> <pre><code>uv sync\n</code></pre> <p>A test server can then be run with:</p> <pre><code>uv run mkdocs serve -f docs/mkdocs.yml\n</code></pre> <p>mkdocs errors</p> <p>When running <code>mkdocs</code>, if you get an error message that references <code>cairo</code>, you will need need to follow this guide to set it up on your system.</p>"},{"location":"developer/building/#generating-command-reference-page","title":"Generating command reference page","text":"<p>The command reference page can automatically be regenerated with:</p> <pre><code>uv run typer gogadget.main utils docs --name gogadget --output docs/pages/reference/command_reference.md\n</code></pre> <p>Manual changes</p> <ol> <li>From the newly generated the command reference page, I delete the first bit of help text that is shown in the command line version when typing <code>gogadget</code>. This is for aesthetic purposes only!</li> <li>As per GNU guidance, copyright / license info is then added to top of file.</li> </ol>"},{"location":"developer/building/#generating-list-of-python-dependencies","title":"Generating list of python dependencies","text":"<p>The list of licenses for python dependencies can be generated with the following. The documentation site automatically references the generated file.</p> <pre><code>uv sync\nsource .venv/bin/activate\npip-licenses --format=markdown --with-authors --no-version --with-urls --with-system --order=license --output-file=src/gogadget/3rd-party-licences/license_listing_for_python_dependencies.md\n</code></pre> <p>File location</p> <p><code>pip-licenses</code> doesn't have the functionality to output to a specific directory. Therefore, you will need to move it to <code>src/gogadget/3rd-party-licenses/</code> manually.</p>"},{"location":"developer/building/#running-from-source","title":"Running from source","text":""},{"location":"developer/building/#generic","title":"Generic","text":"<p>Firstly, please note the package requirements at the top of this document. You can then run:</p> install/run_from_source_example.sh<pre><code>#!/bin/bash\n\n# Download the repo and enter it\ngit clone https://github.com/jonathanfox5/gogadget\ncd gogadget\n\n# Create the virtual environment and install packages\nuv sync\n\n# Run the tool\nuv run gogadget\n\n# Alternatively, you can enter the venv and then run the tool in any directory you like\nsource .venv/bin/activate\ngogadget\n</code></pre>"},{"location":"developer/building/#on-a-clean-install-of-ubuntu-server-2404-lts","title":"On a clean install of Ubuntu Server 24.04 LTS","text":"install/linux_test_install.sh<pre><code>#!/bin/bash\n\n# Update system and install binary requirements\nsudo apt update -y &amp;&amp; sudo apt install -y\nsudo apt install ffmpeg build-essential python3-dev git tree -y\n\n# Install uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nsource $HOME/.local/bin/env\n\n# Build python package\ngit clone https://github.com/jonathanfox5/gogadget\nuv build gogadget\n\n# Find the wheel and install it\nwhl_file=$(ls gogadget/dist/*.whl | head -n 1)\n\nif [ -z \"$whl_file\" ]; then\n    echo \"No .whl file found in the dist directory.\"\n    exit 1\nfi\n\n# Python 3.10 is used due to certain dependencies having \n# compatibility issues with linux ARM on newer versions\nuv tool install \"$whl_file\" --python 3.10\n</code></pre>"},{"location":"developer/contributing/","title":"Contributing","text":""},{"location":"developer/contributing/#requirements-for-pull-requests","title":"Requirements for pull requests","text":"<p>Pull requests are welcome. Some basic requirements.</p> <ul> <li>All python code should be linted / formatted using ruff. The pyproject.toml file in the repository contains project specific settings that should be automatically picked up by both the command line version and VSCode extension versions of ruff. The main requirements are 100 character line length, 4 spaces as intent, import linting and double quotes.</li> <li>All code should be type checked by mypy. Support for <code>import-untyped</code> checking is disabled in pyproject.toml to avoid the need to generate stubs for third party libraries.</li> </ul>"},{"location":"developer/contributing/#targets-for-testing-for-each-release","title":"Targets for testing for each release","text":"<ul> <li>Windows 11 with CUDA</li> <li>Windows 11 without CUDA</li> <li>Windows 11 without any tools in path or python installed</li> <li>macOS: latest available release, Apple Silicon</li> <li>Linux: Ubuntu Server 24.04.1 LTS (ARM and 64 bit x86)</li> </ul> <p>ARM based Windows is not officially supported and the installer only targets 64 bit x86. However, Windows ARM users can follow the custom installation steps if they wish.</p> <p>Intel based macOS systems should also work but no testing has been undertaken to confirm this.</p>"},{"location":"getting_started/example_commands/","title":"Example commands","text":"<p>Please see the Youtube Tutorial for demonstrations of the features, including configuration for more advanced users.</p>"},{"location":"getting_started/example_commands/#download-media","title":"Download media","text":"<p>Download video from a website.</p> <pre><code>gogadget download --url \"https://www.videosite.com/watch?v=videoid\"\n</code></pre> <p>Note</p> <p>The commands <code>gogadget download-audio</code> and <code>gogadget download-subtitles</code> are also available.</p>"},{"location":"getting_started/example_commands/#generate-subtitles","title":"Generate subtitles","text":"<p>Automatically generate subtitles for a video / folder of videos that are in English (<code>en</code>):</p> <pre><code>gogadget transcribe --input \"your folder or filename\" --language en\n</code></pre> <p>GPU Powered Transcription</p> <p>If you have followed the steps in the installation instructions to enable GPU transcription, add <code>--gpu</code> to the end of the command to significantly speed up the transcription.</p>"},{"location":"getting_started/example_commands/#create-anki-deck","title":"Create Anki deck","text":"<p>Generate Anki cards from a full season of an Italian (<code>it</code>) program. Include images / audio on the cards, translate the sentences to the default language (English) and exclude the 1000 most common Italian words:</p> <pre><code>gogadget anki-deck --input \"folder name\" --language it --excluded-words \"ita_top_1000_words.xlsx\"\n</code></pre> <p>See this section for details on how to obtain dictionaries, exclude word spreadsheets and word audio to use with this command.</p> <p>Setting defaults to make using commands easier</p> <p>You can set default parameters using <code>gogadget set-defaults --custom</code>. Once you have set up your defaults, this would allow you use this shortened version of the command:</p> <pre><code>gogadget anki-deck --input \"folder name\"\n</code></pre> <p>An example workflow where defaults are set can be found here.</p>"},{"location":"getting_started/example_use_case/","title":"Example use case: priming","text":""},{"location":"getting_started/example_use_case/#preparing-priming-materials","title":"Preparing priming materials","text":"<p>The following example is my personal use case for producing priming materials prior to immersing in them. My target language is Italian (<code>it</code>) and my native language is English(<code>en</code>). I have downloaded a json dictionary, word audio and an exclude list as described in Getting dictionary, word audio and exclude lists.</p>"},{"location":"getting_started/example_use_case/#setting-defaults","title":"Setting defaults","text":"<p>As a \"one off\" task, I set up my default settings by running <code>gogadget set-defaults --custom</code>. I changed the following settings from the defaults (the defaults are set for the widest compatibility, not for a specific workflow.)</p> <pre><code>[general]\n# Changed language to target language (mine is Italian)\nlanguage = \"it\"\nlanguage_for_translations = \"en\"\noutput_directory = \".\"\n\n[external_resources]\n# Set the paths of the resources on my hard drive\n# Since this is the configuration for my windows pc, I need to replace backslashes with double backslashes to make this a valid file\n# gogadget *should* automatically fix it if single backslashes are used but it's best to get it correct to begin with!\nword_exclude_spreadsheet = \"C:\\\\languages\\\\it\\\\ita_exclude.xlsx\"\ndictionary_file = \"C:\\\\languages\\\\it\\\\it_to_en.json\"\nword_audio_directory = \"C:\\\\languages\\\\it\\\\word_audio\"\n\n[anki]\n# Changed the `include_words_with_no_definition` to False.\n# By filtering out words not in the dictionary, this has the effect of filtering out proper nouns and non-target language words\n# The reason why this is not default behaviour is that it would cause Anki decks to have no cards if the user hasn't set a dictionary\nextract_media = \"True\"\ninclude_words_with_no_definition = \"False\"\nsubs_offset_ms = \"0\"\nsubs_buffer_ms = \"50\"\nmax_cards_in_deck = \"100\"\n\n[lemmatiser]\n# Kept the settings in here as default but it might be useful to tweak them for other languages\nlemmatise = \"True\"\nfilter_out_non_alpha = \"True\"\nfilter_out_stop_words = \"True\"\nconvert_input_to_lower = \"True\"\nconvert_output_to_lower = \"True\"\nreturn_just_first_word_of_lemma = \"True\"\n\n[downloader]\n# I kept subtitle_language blank as I prefer to generate my own using `gogadget transcribe`\nadvanced_options = \"\"\nformat = \"\"\nsubtitle_language = \"\"\n\n[transcriber]\n# I have changed `whisper_use_gpu` to \"True\" on my windows PC which has an Nvidia GPU. This massively speeds up transcription but it does require a GPU that can run CUDA\nwhisper_model = \"deepdml/faster-whisper-large-v3-turbo-ct2\"\nalignment_model = \"\"\nsubtitle_format = \"vtt\"\nmax_subtitle_length = \"94\"\nsubtitle_split_threshold = \"70\"\nwhisper_use_gpu = \"True\"\n</code></pre> <p>Now that these parameters are set, they no longer need to be specified in the commands.</p>"},{"location":"getting_started/example_use_case/#running-commands","title":"Running commands","text":"<p>A note on commands</p> <p>This example uses the \"short\" version of the commands. Using the \"standard\" commands (that are referenced in some other parts of the documentation) is equally valid. More info here.</p> <p>For this example, let's assume that I'm downloading a playlist of videos for a specific series that I want to learn the key vocabulary for. The URL of this hypothetical playlist is <code>https://www.videosite.com/playlist_name</code> and I'm storing everything in a folder called <code>immersion</code>.</p> <p>I would then run the following commands. You will notice that many of the parameters no longer need to be entered as they have been covered by the defaults.</p> <ol> <li> <p>Download the videos that are in the playlist:</p> <pre><code>gogadget download -i \"https://www.videosite.com/playlist_name\" -o \"immersion\"\n</code></pre> </li> <li> <p>Transcribe the Italian subtitles for all of the videos in the folder. If they were available from the website, I could have just downloaded them in the previous step by specifying a <code>--subtitle-language</code> in the command or in the defaults. In general, I prefer the accuracy of transcribing them myself if only auto-generated captions are available.</p> <pre><code>gogadget transcribe -i \"immersion\" -o \"immersion\"\n</code></pre> </li> <li> <p>Create the Anki deck:</p> <pre><code>gogadget anki-deck -i \"immersion\"\n</code></pre> </li> </ol> <p>An Anki deck will be written to <code>immersion/media/</code>. Double click on the <code>.apkg</code> file in that folder and it will automatically be loaded.</p>"},{"location":"getting_started/getting_resources/","title":"Getting dictionaries, word audio and exclude lists","text":""},{"location":"getting_started/getting_resources/#why-cant-you-include-them-for-me","title":"Why can't you include them for me?","text":"<p>Before we jump into where to get the resources, it's worth covering off why these resources aren't included by default.</p> <p>Dictionaries, example word audio and exclude lists are not included by default with <code>gogadget</code> as I do not have the bandwidth to collect, test, maintain and distribute them for hundreds of different word pairings (I am one person working on this in their spare time). Since <code>gogadget</code> is purposefully designed to be free software that is \"offline only\" where possible, you will need to bring your own rather than relying on an online service.</p> <p>Although this is more tricky for you (as the user) to set up, I believe that the positives outweigh the negatives in this specific instance:</p> <ul> <li>This makes it highly customisable, allowing you to use your favourite resources.</li> <li>You can bring your own lists of known words, etc. that are personalised to you.</li> <li>Once you have the resources, they can't be taken away from you. There is no server to be shut down, company that will suddenly start charging for a previously \"free\" service, etc.</li> <li>I can't include copyrighted materials with <code>gogadget</code> unless their license explictly allows it (even if they are freely available). However, as a user of the tool, you can use any resources that you have permission to use.</li> </ul>"},{"location":"getting_started/getting_resources/#specifying-resources-directly-within-the-gogadget-anki-deck-command","title":"Specifying resources directly within the <code>gogadget anki-deck</code> command.","text":"<p>These files are used by <code>gogadget anki-deck</code> and they are specified the following arguments:</p> <ul> <li><code>--dictionary</code> This should be a dictionary in <code>json</code> format. Vocabsieve's documentation is an excellent resource for finding one in your target language. The Migaku ones are currently tested as working. Others which don't follow Migaku's format won't work, although this is currently being worked on.</li> <li><code>--word-audio</code> This is should be a directory of <code>mp3</code> files with native pronunciations of individual words. Vocabsieve's documentation is, again, an excellent resource for these. I use both the Forvo and Lingua Libre ones that are linked in the Vocabsieve docs. The use of <code>mp3</code> (rather than any other audio format) is enforced by the tool due to compatibility issues with certain versions of Anki.</li> </ul> Tips for batch converting files <p>If you need to batch convert files to mp3, you can use any freely available converter. If you are on macOS or Linux (or are running bash on Windows), you already have everything that you need in order to do the conversion.</p> <p>This is an example bash command for batch converting all files in all subfolders from <code>ogg</code> to <code>mp3</code>. Just navigate to the folder containing them and paste in the following command into your terminal:</p> <pre><code>find . -type f -name \"*.ogg\" -exec sh -c 'ffmpeg -i \"$1\" \"${1%.*}.mp3\" &amp;&amp; rm \"$1\"' _ {} \\;\n</code></pre> <p>This is also theoretically possible using PowerShell on Windows. If anyone wants to write a tested PowerShell one-liner (plus usage instructions) that can just be pasted in by a non-tech savvy user on Windows, I'm willing to accept a pull request for the documentation. Creating a formal command within <code>gogadget</code> is on the feature to-do list but is not currently my top priority item.</p> <ul> <li><code>--excluded-words</code> is a spreadsheet with words that you don't want included in your Anki deck. This is useful to make sure that you aren't wasting time reviewing words that you already know. Wiktionary is a good source for frequency lists but you could also export your known words from Anki to get a more personalised experience. The only requirement is that the words that you want to filter out should be in column <code>A</code> of the spreadsheet though you can use multiple sub-sheets in the file if you wish to organise them. I've uploaded example exclude lists here.</li> </ul>"},{"location":"getting_started/getting_resources/#specifying-resources-in-the-config-files","title":"Specifying resources in the config files","text":"<p>You can specify resources in the configuration file so that they will be included every time that you run a command. If you need more help on using the configuration file, please see here.</p> <p>You can access the configuration file by running:</p> <pre><code>gogadget set-defaults --custom\n</code></pre> <p>The lines that you need to change are below.</p> <pre><code>[external_resources]\n# These can be set to \"\" if you don't want to use them or want to specify them every time.\n# Windows paths need to have backslashes replaced with double backslashes, see [instructions] at the top of this file.\n# The tool will try to fix it if you forget but it's best to get it correct to begin with!\n# Valid examples:\n#       word_exclude_spreadsheet = \"C:\\\\data\\\\exclude.xlsx\"     # This will load a specific spreadsheet\n#       word_exclude_spreadsheet = \"\"                           # Don't use an exclude spreadsheet or only use when specified in the command\n\nword_exclude_spreadsheet = \"path here\"\ndictionary_file = \"path here\"\nword_audio_directory = \"path here\"\n</code></pre> <p>If you have set a dictionary file I recommend changing the following setting to clean up the Anki deck by filtering out proper names and non-target language words: In the Anki section, change <code>include_words_with_no_definition</code> to <code>\"False\"</code>.</p> <pre><code>[anki]\ninclude_words_with_no_definition = \"False\"\n</code></pre> <p>This isn't the default setting because, if you don't have a dictionary set, you would end up with zero cards in your Anki deck!</p>"},{"location":"getting_started/getting_started/","title":"Useful links","text":"<ul> <li>If you prefer to watch a tutorial rather than follow a written guide, click here: Video Tutorial</li> <li>Installation instructions: Installation</li> <li>Examples of some of the functions are given here: Basic Examples</li> <li>An example use case of the tool (generating priming materials): Example use case</li> <li>Full written documentation of every function in the tool is available here: Command reference</li> <li>Where to get dictionary and audio files to use in your Anki cards: Getting resources</li> <li>How to get help: Getting Help</li> </ul>"},{"location":"getting_started/installation/","title":"Installation","text":""},{"location":"getting_started/installation/#installation","title":"Installation","text":""},{"location":"getting_started/installation/#windows","title":"Windows","text":"<p>Installation instructions for Windows:</p> <ol> <li> <p>Download the latest version of the gogadget installer from this page.</p> </li> <li> <p>Run the installer. It's highly recommended that you accept all of the default settings unless you know what you are doing!</p> </li> <li> <p>You can run gogadget from the desktop shortcut, from the start menu or by right clicking inside a folder and selecting \"Open gogadget here\".</p> </li> <li> <p>[Optional] You can install all of the models required for your chosen language. Type the following to get the instructions:</p> <pre><code>gogadget install\n</code></pre> </li> </ol> <p>GPU Powered Transcription</p> <p>If you want to enable GPU transcription of subtitles, please tick the \"CUDA\" checkbox in the installer. For more information, please see here.</p>"},{"location":"getting_started/installation/#macos","title":"macOS","text":"<p>Installation instructions for macOS:</p> <ol> <li> <p>Install homebrew if you haven't already got it installed by pasting the following line into the Terminal app and hitting enter.</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> </li> <li> <p>Install the required support packages, using Terminal:</p> <pre><code>brew install ffmpeg uv\n</code></pre> </li> <li> <p>Install gogadget, using Terminal:</p> <pre><code>uv tool install gogadget --python 3.12 --upgrade\n</code></pre> </li> <li> <p>You can then run the tool by typing the following command into Terminal:</p> <pre><code>gogadget\n</code></pre> </li> <li> <p>[Optional] You can install all of the models required for your chosen language. Type the following into Terminal to get the instructions:</p> <pre><code>gogadget install\n</code></pre> </li> </ol>"},{"location":"getting_started/installation/#linux","title":"Linux","text":"<p>Installation instructions for Linux:</p> <ol> <li> <p>Install uv using the following terminal command. uv is a python package manager that is used to keep gogadget packages separate so that they don't interfere with your existing python installation.</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> </li> <li> <p>Install required packages (if you don't already have them) using your package manager. This will depend on your distribution. For example:</p> <ul> <li>Ubuntu based distributions: <code>sudo apt install ffmpeg build-essential python3-dev</code></li> <li>Fedora based distributions: <code>sudo dnf install ffmpeg @development-tools python3-devel</code></li> <li>Arch based distributions: <code>sudo pacman -S ffmpeg base-devel</code></li> </ul> </li> <li> <p>Configure your paths if they aren't already set up:</p> <pre><code>source $HOME/.local/bin/env\n</code></pre> </li> <li> <p>Install gogadget using uv. Note that we are using Python 3.10 instead of Python 3.12 that the other platforms are using. This is to ensure that all dependencies build correctly on ARM CPUs.</p> <pre><code>uv tool install gogadget --python 3.10 --upgrade\n</code></pre> </li> <li> <p>You can then run the tool by typing the following command into your terminal:</p> <pre><code>gogadget\n</code></pre> </li> <li> <p>[Optional] You can install all of the models required for your chosen language. Type the following to get the instructions:</p> <pre><code>gogadget install\n</code></pre> </li> </ol> <p>GPU Powered Transcription</p> <p>[Optional] If you wish to use your GPU instead of your CPU and you have CUDA installed and configured on your system.</p> <p>AFTER you run:</p> <pre><code>uv tool install gogadget --python 3.10 --upgrade\n</code></pre> <p>You can THEN run:</p> <pre><code>uv tool install gogadget --python 3.10 --with 'torch==2.5.1+cu124' --with 'torchaudio==2.5.1+cu124' --index 'https://download.pytorch.org/whl/cu124'\n</code></pre> <p>Note that BOTH commands are required, in this order!</p> <p>For more information, please see here.</p>"},{"location":"getting_started/installation/#enabling-gpu-powered-transcription","title":"Enabling GPU powered transcription","text":""},{"location":"getting_started/installation/#requirements","title":"Requirements","text":"<p>To enable GPU powered transcription of subtitles, you will need:</p> <ul> <li>A CUDA enabled NVIDIA gpu with a decent amount of VRAM (&gt;=8 GB)</li> <li>Windows or Linux</li> <li>Up to date GPU drivers installed</li> </ul> <p>These requirements are the same for most Whisper based transcription tools. Therefore, there will be plenty of guides to help you if you get stuck!</p> <p>If you are using Windows, you will need to make sure that you tick \"CUDA\" in the installer.</p> <p>If you are running Linux or are manually configuring it on Windows, you will need to follow the final step of the Linux installation instructions.</p> <p>Troubleshooting: CUDA Toolkit</p> <p>On most systems, there should be no need to install the CUDA toolkit as it the required runtimes should be provided by your drivers. However, you may wish to try installing the toolkit manually if you run into any problems: https://developer.nvidia.com/cuda-toolkit</p>"},{"location":"getting_started/installation/#running-with-gpu-enabled","title":"Running with GPU enabled","text":"<p>You will need to specify <code>--gpu</code> when running any transcription tasks e.g.:</p> <pre><code>gogadget transcribe -i \"input file or folder\" -l \"code for your language\" --gpu\n</code></pre> <p>Alternatively, you can change the value of <code>whisper_use_gpu</code> in the settings file to <code>\"True\"</code>. You can access the settings by running:</p> <pre><code>gogadget set-defaults --custom\n</code></pre>"},{"location":"getting_started/installation/#custom-installation-notes","title":"Custom installation notes","text":"<p>You should ignore this section if you are using the installation instructions for Windows, macOS or Linux. This is only to help anyone doing their own custom installation.</p> <p>Notes on Python version:</p> <ul> <li>The tool is currently compatible with Python <code>3.10</code>, <code>3.11</code> and <code>3.12</code>. On some platforms, some dependencies have issues when you build them on newer python versions so its generally safest to install <code>3.10</code>.</li> <li><code>3.13</code> is not supported as the dependencies <code>ctranslate2</code> and <code>torch</code> do not currently provide compatible packages.</li> <li>If you manually install gogadget and you get errors about either of these packages, a Python version issue is probably the cause.</li> </ul> <p>You may get some ideas for custom installations from my script that I use to test on clean installs of linux.</p> <p>Building from source</p> <p>If you are doing a custom installation, you may find the developer documentation on building the project from source helpful.</p>"},{"location":"getting_started/supported_languages/","title":"Supported languages","text":"Language Code All Modules Lemmatiser Transcriber Translator Albanian sq \u2705 Arabic ar \u2705 \u2705 Azerbaijani az \u2705 Basque eu \u2705 Bengali bn \u2705 Bulgarian bg \u2705 Catalan ca \u2705 \u2705 \u2705 \u2705 Chinese zh \u2705 \u2705 \u2705 \u2705 Chinese (traditional) zt \u2705 Croatian hr \u2705 \u2705 Czech cs \u2705 \u2705 Danish da \u2705 \u2705 \u2705 \u2705 Dutch nl \u2705 \u2705 \u2705 \u2705 English en \u2705 \u2705 \u2705 \u2705 Esperanto eo \u2705 Estonian et \u2705 Finnish fi \u2705 \u2705 \u2705 \u2705 French fr \u2705 \u2705 \u2705 \u2705 Galician gl \u2705 German de \u2705 \u2705 \u2705 \u2705 Greek el \u2705 \u2705 \u2705 \u2705 Hebrew he \u2705 \u2705 Hindi hi \u2705 \u2705 Hungarian hu \u2705 \u2705 Indonesian id \u2705 Irish ga \u2705 Italian it \u2705 \u2705 \u2705 \u2705 Japanese ja \u2705 \u2705 \u2705 \u2705 Korean ko \u2705 \u2705 \u2705 \u2705 Latvian lv \u2705 Lithuanian lt \u2705 \u2705 Macedonian mk \u2705 Malay ms \u2705 Malayalam ml \u2705 Norwegian no \u2705 Norwegian Bokm\u00e5l nb \u2705 \u2705 Norwegian Nynorsk nn \u2705 Persian fa \u2705 \u2705 Polish pl \u2705 \u2705 \u2705 \u2705 Portuguese pt \u2705 \u2705 \u2705 \u2705 Romanian ro \u2705 \u2705 Russian ru \u2705 \u2705 \u2705 \u2705 Slovak sk \u2705 \u2705 Slovenian sl \u2705 \u2705 \u2705 \u2705 Spanish es \u2705 \u2705 \u2705 \u2705 Swedish sv \u2705 \u2705 Tagalog tl \u2705 Telugu te \u2705 Thai th \u2705 Turkish tr \u2705 \u2705 Ukrainian uk \u2705 \u2705 \u2705 \u2705 Urdu ur \u2705 \u2705 Vietnamese vi \u2705"},{"location":"getting_started/using_the_tool/","title":"Using the tool","text":""},{"location":"getting_started/using_the_tool/#understanding-commands","title":"Understanding commands","text":"<p>The intended behaviour is that the tool itself should guide the user on how to use it. If you type <code>gogadget</code> in a command prompt or terminal window, you will get:</p> <p></p> <p>The main commands are listed in the <code>Primary Functions</code> box and have their own documentation. Each command has parameters associated with it. These can be listed by just typing <code>gogadget</code> then the name of the command that you are interested in. For example, <code>gogadget download</code> produces:</p> <p></p> <p>You will see from the output of that command that you can just run the following to download a video:</p> <pre><code>gogadget download --url \"https://www.videosite.com/watch?v=videoid\"\n</code></pre> <p>Several commands use a standardised two letter code to identify languages (e.g. English is <code>en</code>, Italian is <code>it</code>, Japanese is <code>ja</code>, etc.) To get a list of supported languages and the associated two letter codes, run this command:</p> <pre><code>gogadget list-languages\n</code></pre> <p>Alternatively, you can view the list here.</p>"},{"location":"getting_started/using_the_tool/#configuration","title":"Configuration","text":"<p>It's recommended, but not required, that you fully install the models for the languages that you are interested in.</p> <p>Example: To install Italian (target language) with English (native language) translations, run:</p> <pre><code>gogadget install --language it --translation-language en\n</code></pre> <p>You can also configure defaults so that you don't need to specify as many parameters each time you run your commands:</p> <pre><code>gogadget set-defaults --custom\n</code></pre> <p>An example workflow where defaults are set can be found here.</p>"},{"location":"getting_started/using_the_tool/#short-names","title":"Short names","text":"<p>All parameters in all commands have both a \"standard\" form and a \"short\" form. You can use whatever works best for you! The following two lines are equivalent.</p> <pre><code>gogadget download --url \"https://www.videosite.com/watch?v=videoid\" --output \"immersion videos\" --subtitle-language en\ngogadget download -i \"https://www.videosite.com/watch?v=videoid\" -o \"immersion videos\" -l en\n</code></pre> <p>Note: Regardless of the \"standard\" name, all commands follow the same logic for their \"short\" names. The item that is being used as input is <code>-i</code>, the output is <code>-o</code> and the language is <code>-l</code>. Normally you don't need any more than this!</p>"},{"location":"getting_started/video_tutorial/","title":"Video tutorial","text":"<p>Click here to view the video on YouTube if it does not load above.</p>"},{"location":"license_info/acknowledgements/","title":"Acknowledgements","text":"<p>gogadget is Copyright \u00a9 2024 Jonathan Fox.</p> <p>This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/.</p> <p>All materials in this repository are covered by the aforementioned license, unless specifically noted below:</p> <ul> <li>src/gogadget/ytdlp_cli_to_api.py has been directly reproduced from yt-dlp's github page (license) without modification.</li> <li>The Windows installer bundles the binaries for both FFMPEG (license) and uv (license).</li> <li>The Bootstrap framework javascript and CSS files stored within src/gogadget/resources/html/bootstrap have been directly reproduced without modification (license).</li> <li>Portions of src/gogadget/resources/html/anki/ have been based upon the formatting of Refold's excellent decks. These are APLGv3 licensed, based upon the included code from Ankitects (license). Please see the individual source files for specific licensing information.</li> </ul>"},{"location":"license_info/full_license_info/","title":"Full listing of licenses","text":""},{"location":"license_info/full_license_info/#licences-for-materials-included-in-main-application-repository","title":"Licences for materials included in main application repository","text":"<p>gogadget is Copyright \u00a9 2024 Jonathan Fox.</p> <p>This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/.</p> <p>All materials in this repository are covered by the aforementioned license, unless specifically noted below:</p> <ul> <li>src/gogadget/ytdlp_cli_to_api.py has been directly reproduced from yt-dlp's github page (license) without modification.</li> <li>The Windows installer bundles the binaries for both FFMPEG (license) and uv (license).</li> <li>The Bootstrap framework javascript and CSS files stored within src/gogadget/resources/html/bootstrap have been directly reproduced without modification (license).</li> <li>Portions of src/gogadget/resources/html/anki/ have been based upon the formatting of Refold's excellent decks. These are APLGv3 licensed, based upon the included code from Ankitects (license). Please see the individual source files for specific licensing information.</li> </ul>"},{"location":"license_info/full_license_info/#licences-for-all-python-dependencies","title":"Licences for all python dependencies","text":"<p>The <code>LICENSE</code> files for all dependencies will be installed to your storage alongside the packages. For easy reference, all of the licenses and authors are displayed below, as automatically generated by <code>pip-licenses</code>.</p> <code>UNKNOWN</code> licenses <p><code>audioread</code> displays as <code>UNKNOWN</code> in the table below due to a misconfiguration in the pypi package. It is <code>MIT</code> licensed as per the github listing.</p> <p>Auto-generated list of python dependencies:</p> Name License Author URL protobuf 3-Clause BSD License protobuf@googlegroups.com https://developers.google.com/protocol-buffers/ HyperPyYAML Apache Software License Peter Plantinga, Aku Rouhe https://github.com/speechbrain/HyperPyYAML aiohttp Apache Software License UNKNOWN https://github.com/aio-libs/aiohttp aiosignal Apache Software License UNKNOWN https://github.com/aio-libs/aiosignal ffmpeg-python Apache Software License Karl Kroening https://github.com/kkroening/ffmpeg-python flatbuffers Apache Software License Derek Bailey https://google.github.io/flatbuffers/ frozenlist Apache Software License UNKNOWN https://github.com/aio-libs/frozenlist ghp-import Apache Software License Paul Joseph Davis https://github.com/c-w/ghp-import huggingface-hub Apache Software License Hugging Face, Inc. https://github.com/huggingface/huggingface_hub lightning Apache Software License Lightning AI et al. https://github.com/Lightning-AI/lightning msgpack Apache Software License Inada Naoki songofacandy@gmail.com https://msgpack.org/ multidict Apache Software License Andrew Svetlov https://github.com/aio-libs/multidict nltk Apache Software License NLTK Team https://www.nltk.org/ propcache Apache Software License Andrew Svetlov https://github.com/aio-libs/propcache pytorch-lightning Apache Software License Lightning AI et al. https://github.com/Lightning-AI/lightning regex Apache Software License Matthew Barnett https://github.com/mrabarnett/mrab-regex requests Apache Software License Kenneth Reitz https://requests.readthedocs.io safetensors Apache Software License Nicolas Patry patry.nicolas@protonmail.com https://github.com/huggingface/safetensors sentencepiece Apache Software License Taku Kudo https://github.com/google/sentencepiece sortedcontainers Apache Software License Grant Jenks http://www.grantjenks.com/docs/sortedcontainers/ speechbrain Apache Software License Mirco Ravanelli, Titouan Parcollet &amp; Others https://speechbrain.github.io/ tokenizers Apache Software License Anthony MOI m.anthony.moi@gmail.com https://github.com/huggingface/tokenizers torchmetrics Apache Software License Lightning-AI et al. https://github.com/Lightning-AI/torchmetrics transformers Apache Software License The Hugging Face team (past and future) with the help of all our contributors (https://github.com/huggingface/transformers/graphs/contributors) https://github.com/huggingface/transformers tzdata Apache Software License Python Software Foundation https://github.com/python/tzdata watchdog Apache Software License Micka\u00ebl Schoentgen https://github.com/gorakhargosh/watchdog yarl Apache Software License Andrew Svetlov https://github.com/aio-libs/yarl packaging Apache Software License; BSD License Donald Stufft donald@stufft.io https://github.com/pypa/packaging python-dateutil Apache Software License; BSD License Gustavo Niemeyer https://github.com/dateutil/dateutil lightning-utilities Apache-2.0 Lightning AI et al. https://github.com/Lightning-AI/utilities antlr4-python3-runtime BSD Eric Vergnaud, Terence Parr, Sam Harwell http://www.antlr.org llvmlite BSD UNKNOWN http://llvmlite.readthedocs.io Jinja2 BSD License UNKNOWN https://github.com/pallets/jinja/ Markdown BSD License Manfred Stienstra, Yuri Takhteyev https://Python-Markdown.github.io/ MarkupSafe BSD License UNKNOWN https://github.com/pallets/markupsafe/ Pygments BSD License Georg Brandl georg@python.org https://pygments.org av BSD License Mike Boers https://github.com/PyAV-Org/PyAV babel BSD License Armin Ronacher https://babel.pocoo.org/ blis BSD License Matthew Honnibal https://github.com/explosion/cython-blis cached-property BSD License Daniel Roy Greenfeld https://github.com/pydanny/cached-property cairocffi BSD License Simon Sapin contact@courtbouillon.org https://doc.courtbouillon.org/cairocffi/stable/changelog.html click BSD License UNKNOWN https://palletsprojects.com/p/click/ colorama BSD License Jonathan Hartley tartley@tartley.com https://github.com/tartley/colorama contourpy BSD License Ian Thomas ianthomas23@gmail.com https://github.com/contourpy/contourpy csscompressor BSD License Yury Selivanov http://github.com/sprymix/csscompressor cssselect2 BSD License Simon Sapin simon.sapin@exyr.org https://doc.courtbouillon.org/cssselect2/ cycler BSD License Thomas A Caswell matplotlib-users@python.org https://matplotlib.org/cycler/ decorator BSD License Michele Simionato https://github.com/micheles/decorator fsspec BSD License UNKNOWN https://github.com/fsspec/filesystem_spec htmlmin2 BSD License Dave Mankoff https://htmlmin.readthedocs.io/en/latest/ idna BSD License Kim Davies kim+pypi@gumleaf.org https://github.com/kjd/idna joblib BSD License Gael Varoquaux gael.varoquaux@normalesup.org https://joblib.readthedocs.io kiwisolver BSD License The Nucleic Development Team sccolbert@gmail.com https://github.com/nucleic/kiwi lazy_loader BSD License Scientific Python Developers https://github.com/scientific-python/lazy_loader mkdocs BSD License Tom Christie tom@tomchristie.com https://github.com/mkdocs/mkdocs mpmath BSD License Fredrik Johansson http://mpmath.org/ networkx BSD License Aric Hagberg hagberg@lanl.gov https://networkx.org/ numba BSD License UNKNOWN https://numba.pydata.org numpy BSD License Travis E. Oliphant et al. https://numpy.org omegaconf BSD License Omry Yadan https://github.com/omry/omegaconf pandas BSD License The Pandas Development Team pandas-dev@python.org https://pandas.pydata.org pooch BSD License The Pooch Developers fatiandoaterra@protonmail.com https://www.fatiando.org/pooch/latest/changes.html prettytable BSD License Luke Maurits luke@maurits.id.au https://github.com/prettytable/prettytable pycparser BSD License Eli Bendersky https://github.com/eliben/pycparser scikit-learn BSD License UNKNOWN https://scikit-learn.org scipy BSD License UNKNOWN https://scipy.org/ semver BSD License Kostiantyn Rybnikov https://github.com/python-semver/python-semver soundfile BSD License Bastian Bechtold https://github.com/bastibe/python-soundfile sympy BSD License SymPy development team https://sympy.org threadpoolctl BSD License Thomas Moreau https://github.com/joblib/threadpoolctl tinycss2 BSD License Simon Sapin simon.sapin@exyr.org https://www.courtbouillon.org/tinycss2 torch BSD License PyTorch Team https://pytorch.org/ torchaudio BSD License Soumith Chintala, David Pollack, Sean Naren, Peter Goldsborough, Moto Hira, Caroline Chen, Jeff Hwang, Zhaoheng Ni, Xiaohui Zhang https://github.com/pytorch/audio webencodings BSD License Geoffrey Sneddon https://github.com/SimonSapin/python-webencodings wrapt BSD License Graham Dumpleton https://github.com/GrahamDumpleton/wrapt gogadget GNU Affero General Public License v3 or later (AGPLv3+) Jonathan Fox https://gogadget.jfox.io/ soxr GNU Lesser General Public License v2 or later (LGPLv2+) KEUM Myungchul https://github.com/dofuuz/python-soxr frozendict GNU Lesser General Public License v3 (LGPLv3) Marco Sulla https://github.com/Marco-Sulla/python-frozendict CairoSVG GNU Lesser General Public License v3 or later (LGPLv3+) Guillaume Ayoub https://courtbouillon.org/cairosvg pillow Historical Permission Notice and Disclaimer (HPND) \"Jeffrey A. Clark\" aclark@aclark.net https://python-pillow.org librosa ISC License (ISCL) Brian McFee, librosa development team https://librosa.org shellingham ISC License (ISCL) Tzu-ping Chung https://github.com/sarugaku/shellingham genanki MIT Kerrick Staley http://github.com/kerrickstaley/genanki mkdocs-glightbox MIT Blueswen https://blueswen.github.io/mkdocs-glightbox spacy-loggers MIT Explosion https://github.com/explosion/spacy-loggers wasabi MIT Explosion https://github.com/explosion/wasabi Mako MIT License Mike Bayer https://www.makotemplates.org/ PyYAML MIT License Kirill Simonov https://pyyaml.org/ SQLAlchemy MIT License Mike Bayer https://www.sqlalchemy.org alembic MIT License Mike Bayer https://alembic.sqlalchemy.org annotated-types MIT License Adrian Garcia Badaracco 1755071+adriangb@users.noreply.github.com, Samuel Colvin s@muelcolvin.com, Zac Hatfield-Dodds zac@zhd.dev https://github.com/annotated-types/annotated-types argos-spacy-compatibility MIT License Your Name UNKNOWN asteroid-filterbanks MIT License Manuel Pariente https://github.com/asteroid-team/asteroid-filterbanks attrs MIT License Hynek Schlawack hs@ox.cx https://www.attrs.org/en/stable/changelog.html catalogue MIT License Explosion https://github.com/explosion/catalogue cffi MIT License Armin Rigo, Maciej Fijalkowski http://cffi.readthedocs.org charset-normalizer MIT License Ahmed TAHRI https://github.com/Ousret/charset_normalizer chevron MIT License noah morrison https://github.com/noahmorrison/chevron cloudpathlib MIT License DrivenData info@drivendata.org https://github.com/drivendataorg/cloudpathlib coloredlogs MIT License Peter Odding https://coloredlogs.readthedocs.io colorlog MIT License Sam Clements https://github.com/borntyping/python-colorlog confection MIT License Explosion https://github.com/explosion/confection ctranslate2 MIT License OpenNMT https://opennmt.net cymem MIT License Matthew Honnibal https://github.com/explosion/cymem docopt MIT License Vladimir Keleshev http://docopt.org einops MIT License Alex Rogozhnikov https://github.com/arogozhnikov/einops et_xmlfile MIT License See AUTHORS.txt https://foss.heptapod.net/openpyxl/et_xmlfile faster-whisper MIT License Guillaume Klein https://github.com/SYSTRAN/faster-whisper fonttools MIT License Just van Rossum http://github.com/fonttools/fonttools future MIT License Ed Schofield https://python-future.org humanfriendly MIT License Peter Odding https://humanfriendly.readthedocs.io jsmin MIT License Dave St.Germain https://github.com/tikitu/jsmin/ julius MIT License Alexandre D\u00e9fossez https://github.com/adefossez/julius langcodes MIT License Elia Robyn Speer rspeer@arborelia.net https://github.com/georgkrause/langcodes language_data MIT License Elia Robyn Speer rspeer@arborelia.net https://github.com/georgkrause/language_data lemon_tizer MIT License Jonathan Fox https://github.com/jonathanfox5/lemon_tizer marisa-trie MIT License Mikhail Korobov https://github.com/pytries/marisa-trie markdown-it-py MIT License Chris Sewell chrisj_sewell@hotmail.com https://github.com/executablebooks/markdown-it-py mdurl MIT License Taneli Hukkinen hukkin@users.noreply.github.com https://github.com/executablebooks/mdurl mdx-truly-sane-lists MIT License radude https://github.com/radude/mdx_truly_sane_lists mergedeep MIT License Travis Clarke https://github.com/clarketm/mergedeep mkdocs-get-deps MIT License Oleh Prypin oleh@pryp.in https://github.com/mkdocs/get-deps mkdocs-material MIT License Martin Donath martin.donath@squidfunk.com https://github.com/squidfunk/mkdocs-material mkdocs-material-extensions MIT License Isaac Muse Isaac.Muse@gmail.com https://github.com/facelessuser/mkdocs-material-extensions mkdocs-minify-plugin MIT License Byrne Reese, Lars Wilhelmer https://github.com/byrnereese/mkdocs-minify-plugin murmurhash MIT License Explosion https://github.com/explosion/murmurhash onnxruntime MIT License Microsoft Corporation https://onnxruntime.ai openpyxl MIT License See AUTHORS https://openpyxl.readthedocs.io optuna MIT License Takuya Akiba https://optuna.org/ paginate MIT License Christoph Haas https://github.com/Signum/paginate pip MIT License The pip developers distutils-sig@python.org https://pip.pypa.io/ pip-licenses MIT License raimon raimon49@hotmail.com https://github.com/raimon49/pip-licenses platformdirs MIT License UNKNOWN https://github.com/tox-dev/platformdirs preshed MIT License Explosion https://github.com/explosion/preshed primePy MIT License Indrajit Jana https://github.com/janaindrajit/primePy pyannote.audio MIT License Herv\u00e9 Bredin https://github.com/pyannote/pyannote-audio pyannote.core MIT License Herv\u00e9 Bredin http://pyannote.github.io/ pyannote.database MIT License Herv\u00e9 Bredin http://pyannote.github.io/ pyannote.metrics MIT License Herve Bredin https://pyannote.github.io/pyannote-metrics pyannote.pipeline MIT License Herv\u00e9 Bredin http://pyannote.github.io/ pydantic MIT License Samuel Colvin s@muelcolvin.com, Eric Jolibois em.jolibois@gmail.com, Hasan Ramezani hasan.r67@gmail.com, Adrian Garcia Badaracco 1755071+adriangb@users.noreply.github.com, Terrence Dorsey terry@pydantic.dev, David Montague david@pydantic.dev, Serge Matveenko lig@countzero.co, Marcelo Trylesinski marcelotryle@gmail.com, Sydney Runkle sydneymarierunkle@gmail.com, David Hewitt mail@davidhewitt.io, Alex Hall alex.mojaki@gmail.com, Victorien Plot contact@vctrn.dev https://github.com/pydantic/pydantic pydantic_core MIT License Samuel Colvin s@muelcolvin.com https://github.com/pydantic/pydantic-core pymdown-extensions MIT License Isaac Muse Isaac.Muse@gmail.com https://github.com/facelessuser/pymdown-extensions pyparsing MIT License Paul McGuire ptmcg.gm+pyparsing@gmail.com https://github.com/pyparsing/pyparsing/ pysubs2 MIT License Tomas Karabela https://github.com/tkarabela/pysubs2 pytorch-metric-learning MIT License Kevin Musgrave https://github.com/KevinMusgrave/pytorch-metric-learning pytz MIT License Stuart Bishop http://pythonhosted.org/pytz pyyaml_env_tag MIT License Waylan Limberg https://github.com/waylan/pyyaml-env-tag rich MIT License Will McGugan https://github.com/Textualize/rich rtoml MIT License Samuel Colvin s@muelcolvin.com https://github.com/samuelcolvin/rtoml ruamel.yaml MIT License Anthon van der Neut https://sourceforge.net/p/ruamel-yaml/code/ci/default/tree/ ruamel.yaml.clib MIT License Anthon van der Neut https://sourceforge.net/p/ruamel-yaml-clib/code/ci/default/tree/ sacremoses MIT License UNKNOWN https://github.com/alvations/sacremoses setuptools MIT License Python Packaging Authority distutils-sig@python.org https://github.com/pypa/setuptools six MIT License Benjamin Peterson https://github.com/benjaminp/six smart-open MIT License Radim Rehurek https://github.com/piskvorky/smart_open spacy MIT License Explosion https://spacy.io spacy-legacy MIT License Explosion https://spacy.io srsly MIT License Explosion https://github.com/explosion/srsly tabulate MIT License Sergey Astanin s.astanin@gmail.com https://github.com/astanin/python-tabulate tensorboardX MIT License Tzu-Wei Huang https://github.com/lanpa/tensorboardX thinc MIT License Explosion https://github.com/explosion/thinc tomli MIT License Taneli Hukkinen hukkin@users.noreply.github.com https://github.com/hukkin/tomli tomlkit MIT License S\u00e9bastien Eustace https://github.com/sdispater/tomlkit torch-audiomentations MIT License Iver Jordal https://github.com/asteroid-team/torch-audiomentations torch_pitch_shift MIT License KentoNishi https://github.com/KentoNishi/torch-pitch-shift typer MIT License =?utf-8?q?Sebasti=C3=A1n_Ram=C3=ADrez?= tiangolo@gmail.com https://github.com/fastapi/typer urllib3 MIT License Andrey Petrov andrey.petrov@shazow.net https://github.com/urllib3/urllib3/blob/main/CHANGES.rst wcwidth MIT License Jeff Quast https://github.com/jquast/wcwidth weasel MIT License Explosion https://github.com/explosion/weasel/ whisperjf MIT License Jonathan Fox UNKNOWN tqdm MIT License; Mozilla Public License 2.0 (MPL 2.0) UNKNOWN https://tqdm.github.io certifi Mozilla Public License 2.0 (MPL 2.0) Kenneth Reitz https://github.com/certifi/python-certifi pathspec Mozilla Public License 2.0 (MPL 2.0) \"Caleb P. Burns\" cpburnz@gmail.com UNKNOWN aiohappyeyeballs Other/Proprietary License; Python Software Foundation License J. Nick Koston https://github.com/aio-libs/aiohappyeyeballs defusedxml Python Software Foundation License Christian Heimes https://github.com/tiran/defusedxml matplotlib Python Software Foundation License John D. Hunter, Michael Droettboom https://matplotlib.org typing_extensions Python Software Foundation License \"Guido van Rossum, Jukka Lehtosalo, \u0141ukasz Langa, Michael Lee\" levkivskyi@gmail.com https://github.com/python/typing_extensions filelock The Unlicense (Unlicense) UNKNOWN https://github.com/tox-dev/py-filelock yt-dlp The Unlicense (Unlicense) UNKNOWN https://github.com/yt-dlp/yt-dlp audioread UNKNOWN Adrian Sampson adrian@radbox.org UNKNOWN"},{"location":"misc/getting_help/","title":"Getting Help","text":""},{"location":"misc/getting_help/#where-to-ask-questions","title":"Where to ask questions","text":"<p>Firstly, please see if your issue is addressed in Getting Started, the video tutorial or, if you are comfortable with it, the Detailed Command Reference.</p> <p>If you can't find the answer, you can ask on GitHub:</p> <ul> <li>The issues page can be used for bug reports and feature requests.</li> <li>The discussions page can be used for any other purpose (e.g. questions on how to do specific things within the tool).</li> </ul> <p>I will do my best to provide support in a timely manner. However, I run this project in my spare time so any troubleshooting that you can do yourself first goes a long way!</p>"},{"location":"misc/getting_help/#a-different-type-of-language-learning-get-help","title":"A different type of language learning \"get help\"?","text":"<p>As a language learner, there is a very, very small (but real) chance that you were looking for this instead...</p>"},{"location":"misc/other_projects/","title":"Other projects","text":"<p>You may also be interested in:</p> <p>My projects</p> <ul> <li>Translate Horizon: Zero Dawn: A set of python scripts to build priming and reference materials directly from the game files.</li> <li>Plot Vowel Space: A set of python scripts to plot your vowel positions and compare them against reference audio.</li> <li>LemonTizer: A python library that wraps the <code>spacy</code> lemmatiser for use in other language learning tools.</li> </ul> <p>Other projects</p> <ul> <li>Anki: A powerful and customisable flashcard tool.</li> <li>Vocabsieve: A very useful sentence mining tool.</li> <li>asbplayer: A video player well suited for sentence mining and manipulating on screen subtitles within your browser.</li> <li>Lute: An immersion learning tool, focused on written materials.</li> </ul>"},{"location":"reference/command_reference/","title":"Detailed command reference","text":""},{"location":"reference/command_reference/#gogadget","title":"<code>gogadget</code>","text":"<p>Usage:</p> <pre><code>$ gogadget [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--version</code>: Display application version.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>anki-deck</code>: Build an Anki deck using the most common...</li> <li><code>download</code>: Download a video or playlist from a...</li> <li><code>download-audio</code>: Download a video or playlist from a...</li> <li><code>download-subtitles</code>: Download subtitles from an online video...</li> <li><code>frequency-analysis</code>: Produce a frequency analysis of the most...</li> <li><code>transcribe</code>: Produce subtitle file(s) from audio or...</li> <li><code>install</code>: Download models for a given --language and...</li> <li><code>list-languages</code>: Display languages supported by the tool.</li> <li><code>set-defaults</code>: Configure your default paths so that don't...</li> <li><code>update-downloader</code>: Update the downloader to use the latest...</li> </ul>"},{"location":"reference/command_reference/#gogadget-anki-deck","title":"<code>gogadget anki-deck</code>","text":"<p>Build an Anki deck using the most common vocabulary in a subtitles file or a folder of subtitles. Optionally include audio and / or screenshots from the source media file(s).</p> <p>If you use this regularly, it's highly recommended to set the default paths to your dictionary, excluded words, etc. and preferred processing options to simplify the process. You can set your defaults using the following command:  gogadget set-defaults --custom</p> <p>Examples: 1. Normal usage using standard names where your target language is italian and your native language is English. gogadget anki-deck --input \"folder containing subtitles and media files\" --language it --translation-language en</p> <p>2. As per (1) but uses dictionary, word exclude list and word audio bank. Also uses --exclude-no-definition to filter out proper nouns / non-target language words. gogadget anki-deck --input \"folder containing subtitles and media files\" --language it --translation-language en --dictionary \"dictionary.json\" --word_audio \"folder_name\" --excluded-words \"excel_name.xlsx\" --exclude-no-definition</p> <p>3. Equivalent of (2) using short names. gogadget anki-deck -i \"folder containing subtitles and media files\" -l it -t en -d \"dictionary.json\" -w \"folder_name\" -e \"excel_name.xlsx\" -h</p> <p>4. If you have set all of your defaults as described above, you can just run. gogadget anki-deck -i \"folder containing subtitles and media files\"</p> <p>Usage:</p> <pre><code>$ gogadget anki-deck [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-i, --input PATH</code>: Directory (folder) containing the video file(s) and subtitle files(s) to be turned into an Anki deck. [required]</li> <li><code>-l, --language TEXT</code>: Language to use for processing. This should be a two letter language code, e.g. en (for English), es (for Spanish) or it (Italian). Run gogadget list-languages for a list of supported languages. [default: it]</li> <li><code>-t, --translation-language TEXT</code>: [Optional] Language to use for translations. Translation quality is generally best if either the target language or the translation is set to en (English). This should be a two letter language code, e.g. en (for English), es (for Spanish) or it (Italian). Run gogadget list-languages for a list of supported languages. [default: en]</li> <li><code>-f, --offset INTEGER</code>: [Optional] Time, in milliseconds, to offset the subtitles by when extracting audio. Not normally required if subtitles were generated by gogadget transcribe. [default: 0]</li> <li><code>-b, --buffer INTEGER</code>: [Optional] Extra time, in milliseconds, to add to the extracted audio to avoid it being cut off. Not normally required if subtitles were generated by gogadget transcribe. [default: 50]</li> <li><code>-x, --max-cards INTEGER</code>: [Optional] Maximum number of cards to include in the deck. [default: 100]</li> <li><code>-w, --word-audio PATH</code>: [Optional] Directory of mp3 files of individual words to include in the Anki cards. [default: /Users/jonathan/Library/Mobile Documents/com~apple~CloudDocs/Italian/Dictionaries/Audio]</li> <li><code>-d, --dictionary PATH</code>: [Optional] Dictionary in json format to retrieve definitions from for the Anki cards. [default: /Users/jonathan/Library/Mobile Documents/com~apple~CloudDocs/Italian/Dictionaries/Dictionaries/Migaku/Vicon_Ita_to_Eng_Dictionary.json]</li> <li><code>-e, --excluded-words PATH</code>: [Optional] Spreadsheet containing words to exclude from the analysis (e.g. the most common words in a language, words already learned). Words should be in the first column of the spreadsheet but can be split across multiple sub-sheets within the file. [default: /Users/jonathan/Library/Mobile Documents/com~apple~CloudDocs/Italian/Dictionaries/Frequency_lists/ita_exclude.xlsx]</li> <li><code>-m, --lemma / -n, --no-lemma</code>: [Optional] Enable or disable lemmatisation. If supported for your language, this is generally recommended. [default: lemma]</li> <li><code>-s, --stop-words / -p, --no-stop-words</code>: [Optional] If lemmatisation is enabled, you can include or exclude stop words. Stop words are short 'function' words such as 'the', 'that', 'which', etc. [default: no-stop-words]</li> <li><code>-q, --media / -r, --no-media</code>: [Optional] Media to extract sentence audio and screenshots from to display on the Anki card. This can either be a video or audio only source. [default: media]</li> <li><code>-g, --include-no-definition / -h, --exclude-no-definition</code>: [Optional] Include cards where the definition can't be found in the dictionary. Setting --exclude-no-definition may improve the quality of the deck as it will likely filter many proper nouns, words not from the target language, etc. [default: exclude-no-definition]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/command_reference/#gogadget-download","title":"<code>gogadget download</code>","text":"<p>Download a video or playlist from a website URL.</p> <p>Examples:</p> <p>1. Normal usage using standard names. gogadget download --url \"https://www.videosite.com/watch?v=videoid\"</p> <p>2. More advanced usage using standard names. gogadget download --url \"https://www.videosite.com/watch?v=videoid\" --output \"immersion videos\" --subtitle_language en --format \"best\"</p> <p>3. Equivalent of (2) using short names. gogadget download -i \"https://www.videosite.com/watch?v=videoid\" -o \"immersion videos\" -l en -f \"best\"</p> <p>Usage:</p> <pre><code>$ gogadget download [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-i, --url TEXT</code>: URL of the video or playlist. Supports any website supported by yt-dlp. [required]</li> <li><code>-o, --output PATH</code>: [Optional] Directory (aka folder) to save the files to. Defaults to the current working directory where the user is running the script from. [default: .]</li> <li><code>-f, --format TEXT</code>: [Optional] Specify the format of the video. Accepts yt-dlp's format options.</li> <li><code>-l, --subtitle-language TEXT</code>: [Optional] Language of subtitles to download. If you want to download these, you should enter a two letter language code such as en, es or it. It will try to download manual subtitles first and fallback to automatically generated subtitles if these aren't found.</li> <li><code>-a, --advanced-options TEXT</code>: [Optional][Advanced] Custom yt-dlp options, should accept any command line arguments on the github page. Please format these as a string, enclosed by quotes.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/command_reference/#gogadget-download-audio","title":"<code>gogadget download-audio</code>","text":"<p>Download a video or playlist from a website URL and convert it to an audio file.</p> <p>Examples:</p> <p>1. Normal usage using standard names. gogadget download-audio --url \"https://www.videosite.com/watch?v=videoid\"</p> <p>2. More advanced usage using standard names. gogadget download-audio --url \"https://www.videosite.com/watch?v=videoid\" --output \"immersion videos\"</p> <p>3. Equivalent of (2) using short names. gogadget download-audio -i \"https://www.videosite.com/watch?v=videoid\" -o \"immersion videos\"</p> <p>Usage:</p> <pre><code>$ gogadget download-audio [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-i, --url TEXT</code>: URL of the video or playlist. Supports any website supported by yt-dlp. [required]</li> <li><code>-o, --output PATH</code>: [Optional] Directory (aka folder) to save the files to. Defaults to the current working directory where the user is running the script from. [default: .]</li> <li><code>-a, --advanced-options TEXT</code>: [Optional][Advanced] Custom yt-dlp options, should accept any command line arguments on the github page. Please format these as a string, enclosed by quotes.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/command_reference/#gogadget-download-subtitles","title":"<code>gogadget download-subtitles</code>","text":"<p>Download subtitles from an online video service.</p> <p>Examples: 1. Download english subtitles for a given video. gogadget download-subtitles --url \"https://www.videosite.com/watch?v=videoid\" --subtitle-language en</p> <p>2. Equivalent of (1) using short names. gogadget download-subtitles -i \"https://www.videosite.com/watch?v=videoid\" -l en</p> <p>Usage:</p> <pre><code>$ gogadget download-subtitles [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-i, --url TEXT</code>: URL of the video or playlist. Supports any website supported by yt-dlp. [required]</li> <li><code>-l, --subtitle-language TEXT</code>: Language of subtitles to download. You should enter a two letter language code such as en, es or it. It will try to download manual subtitles first and fallback to automatically generated subtitles if these aren't found.</li> <li><code>-o, --output PATH</code>: [Optional] Directory (aka folder) to save the files to. Defaults to the current working directory where the user is running the script from. [default: .]</li> <li><code>-a, --advanced-options TEXT</code>: [Optional][Advanced] Custom yt-dlp options, should accept any command line arguments on the github page. Please format these as a string, enclosed by quotes.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/command_reference/#gogadget-frequency-analysis","title":"<code>gogadget frequency-analysis</code>","text":"<p>Produce a frequency analysis of the most common vocabulary in a subtitles file or a folder of subtitles. Useful for priming, also used as a pre-processing stage for some other functions.</p> <p>If you use this regularly, it's highly recommended to set the default paths to your excluded words and preferred processing options to simplify the process. You can set your defaults using the following command:  gogadget set-defaults --custom</p> <p>Examples: 1. Normal usage using standard names where your target language is italian. gogadget frequency-analysis --input \"folder containing subtitles\" --language it</p> <p>2. As per (1) but uses word exclude list. gogadget frequency-analysis --input \"folder containing subtitles\" --language it --excluded-words \"excel_name.xlsx\"</p> <p>3. Equivalent of (2) using short names. gogadget frequency-analysis -i \"folder containing subtitles\" -l it -e \"excel_name.xlsx\"</p> <p>4. If you have set all of your defaults as described above, you can just run. gogadget frequency-analysis -i \"folder containing subtitles\"</p> <p>Usage:</p> <pre><code>$ gogadget frequency-analysis [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-i, --input PATH</code>: Directory (folder) containing the subtitle files(s) to be analysed. [required]</li> <li><code>-l, --language TEXT</code>: Language to use for processing. This should be a two letter language code, e.g. en (for English), es (for Spanish) or it (Italian). Run gogadget list-languages for a list of supported languages. [default: it]</li> <li><code>-o, --output PATH</code>: [Optional] Directory (aka folder) to save the files to. Defaults to the current working directory where the user is running the script from. [default: .]</li> <li><code>-e, --excluded-words PATH</code>: [Optional] Spreadsheet containing words to exclude from the analysis (e.g. the most common words in a language, words already learned). Words should be in the first column of the spreadsheet but can be split across multiple sub-sheets within the file. [default: /Users/jonathan/Library/Mobile Documents/com~apple~CloudDocs/Italian/Dictionaries/Frequency_lists/ita_exclude.xlsx]</li> <li><code>-m, --lemma / -n, --no-lemma</code>: [Optional] Enable or disable lemmatisation. If supported for your language, this is generally recommended. [default: lemma]</li> <li><code>-s, --stop-words / -p, --no-stop-words</code>: [Optional] If lemmatisation is enabled, you can include or exclude stop words. Stop words are short 'function' words such as 'the', 'that', 'which', etc. [default: no-stop-words]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/command_reference/#gogadget-transcribe","title":"<code>gogadget transcribe</code>","text":"<p>Produce subtitle file(s) from audio or video using whisperX.</p> <p>--input and -i accept both files and directories of files.</p> <p>If you have an NVIDIA GPU that is set up for CUDA, it's strongly recommended to pass the --gpu flag as this significantly speeds up the tool.</p> <p>You can also reduce runtime (at the expense of accuracy) by specifying --whisper-model small</p> <p>Examples: 1. Transcribe a media file or folder of media files that is in English. gogadget transcribe --input \"path to media file or folder containing media files\" --language en</p> <p>2. As per (1) but using the GPU to process the model. gogadget transcribe --input \"path to media file or folder containing media files\" --language en --gpu</p> <p>3. Example using short names where the output folder is also specified. gogadget transcribe -i \"path to media file or folder containing media files\" -o \"folder to save to\" -l en -g</p> <p>Usage:</p> <pre><code>$ gogadget transcribe [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-i, --input PATH</code>: Path to the video or audio file to transcribe. This can be either a specific video / audio file or a folder of files. [required]</li> <li><code>-l, --language TEXT</code>: Language to use for processing. This should be a two letter language code, e.g. en (for English), es (for Spanish) or it (Italian). Run gogadget list-languages for a list of supported languages. [default: it]</li> <li><code>-o, --output PATH</code>: [Optional] Directory (aka folder) to save the files to. Defaults to the current working directory where the user is running the script from. [default: .]</li> <li><code>-m, --max-length INTEGER</code>: [Optional] The absolute maximum length that a subtitle can be. [default: 94]</li> <li><code>-s, --split-length INTEGER</code>: [Optional] The length at which the tool considers splitting a subtitle. [default: 70]</li> <li><code>-w, --whisper-model TEXT</code>: [Optional] Specify the whisper model to use for transcription. By default, this is large-v3 turbo but setting this to small can significantly speed the process up at the cost of accuracy. [default: deepdml/faster-whisper-large-v3-turbo-ct2]</li> <li><code>-a, --align-model TEXT</code>: [Optional] Specify the model from hugging face to use to align the subtitles with the audio. For the most common languages, the tool will find this for you.</li> <li><code>-g, --gpu / -c, --cpu</code>: [Optional] You can specify --gpu if you have a CUDA enabled Nvidia graphics card to significantly speed up the processing. [default: cpu]</li> <li><code>-f, --subtitle-format TEXT</code>: [Optional] File format for the subtitles. You can specify vtt, srt, json, txt, tsv or aud. Vtt is the preferred format of the other tools in this suite. [default: vtt]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/command_reference/#gogadget-install","title":"<code>gogadget install</code>","text":"<p>Download models for a given --language and initialises tools.</p> <p>Examples: 1. Install modules to process Italian and produce English translations. gogadget install --language it --translation-language en</p> <p>2. To get a list of language codes to use in the command, run: gogadget list-languages</p> <p>Usage:</p> <pre><code>$ gogadget install [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-l, --language TEXT</code>: Language to use for processing. This should be a two letter language code, e.g. en (for English), es (for Spanish) or it (Italian). Run gogadget list-languages for a list of supported languages. [default: it]</li> <li><code>-t, --translation-language TEXT</code>: [Optional] Language to use for translations. Translation quality is generally best if either the target language or the translation is set to en (English). This should be a two letter language code, e.g. en (for English), es (for Spanish) or it (Italian). Run gogadget list-languages for a list of supported languages. [default: en]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/command_reference/#gogadget-list-languages","title":"<code>gogadget list-languages</code>","text":"<p>Display languages supported by the tool.</p> <p>Examples: 1. List languages supported by all functions of the tool. gogadget list-languages</p> <p>2. List languages supported or partially supported by each module. gogadget list-languages --detailed</p> <p>Usage:</p> <pre><code>$ gogadget list-languages [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-a, --detailed</code>: [Optional] List the languages supported by each module of the tool.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/command_reference/#gogadget-set-defaults","title":"<code>gogadget set-defaults</code>","text":"<p>Configure your default paths so that don't need to specify them each time.</p> <p>Examples:</p> <p>1. Open the settings file on your folder in your default text editor. gogadget set-defaults --custom</p> <p>2. Reset to factory defaults. gogadget set-defaults --factory</p> <p>~~~~ WARNING ~~~~ It is possible to break the tool by setting incorrect values in the config file. Reset to factory defaults if you experience errors or unexpected behaviour.</p> <p>Usage:</p> <pre><code>$ gogadget set-defaults [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-f, --factory</code>: [Optional] Load factory default settings. These settings are chosen to be compatible with most systems and languages with minimal tweaking.</li> <li><code>-c, --custom</code>: [Optional] Set custom settings in a text file. Useful for setting default paths to resources.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/command_reference/#gogadget-update-downloader","title":"<code>gogadget update-downloader</code>","text":"<p>Update the downloader to use the latest version of yt-dlp.</p> <p>Examples:</p> <p>1. Update downloader. gogadget update-downloader</p> <p>Usage:</p> <pre><code>$ gogadget update-downloader [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/default_settings/","title":"Settting defaults in the configuration file","text":""},{"location":"reference/default_settings/#accessing-settings","title":"Accessing settings","text":"<p>The settings can be accessed with the following command. It will open the settings file in your default GUI text editor on macOS / Linux or in notepad / VSCode on Windows.</p> <pre><code>gogadget set-defaults --custom\n</code></pre> <p>If required, the settings file can be reset with the following command.</p> <pre><code>gogadget set-defaults --factory\n</code></pre>"},{"location":"reference/default_settings/#settings-file-location","title":"Settings file location","text":"<p><code>gogadget set-defaults --custom</code> will open the settings file for you. Should you wish to access the file directly, it should be stored at:</p> <ul> <li>Windows: <code>%APPDATA%\\gogadget\\gogadget.toml</code> (you can paste this directly in like a normal path, Windows will convert <code>%APPDATA</code> to the correct folder within your user directory)</li> <li>macOS: <code>~/Library/Application Support/gogadget/gogadget.toml</code></li> <li>Linux: <code>~/.config/gogadget/gogadget.toml</code></li> </ul> <p>Alternate paths could include <code>~/.gogadget/gogadget.toml</code> and <code>%LOCALAPPDATA%\\gogadget\\gogadget.toml</code> if you have system settings that override the default directory behaviour.</p> <p>Note that the settings file is generated on the first run of the tool so won't be available until you have run it (any command works) at least once.</p>"},{"location":"reference/default_settings/#default-settings","title":"Default Settings","text":"default_gogadget.toml<pre><code>[instructions]\n# IMPORTANT INFORMATION\n# =====================\n# - All values are text and should be therefore be wrapped in double quotes. Valid examples:\n#       language = \"en\"\n#       lemmatise = \"True\"\n#       lemmatise = \"False\"\n#       subs_offset_ms = \"0\"\n#       subs_offset_ms = \"50\"\n# - If you don't want to a specify a value, just type two double quotes beside each other e.g.:\n#       language = \"\"\n#       word_exclude_spreadsheet = \"\"\n# - If you are on Windows, any paths will need to have any backslashes replaces with a double backslash e.g.:\n#       word_exclude_spreadsheet = \"C:\\\\data\\\\exclude.xlsx\"\n#   Since this is easy to forget about, the tool will try to fix it for you. However, it's always best if it is correct to begin with!\n#\n# WARNING\n# =======\n# It is possible to break the tool by setting incorrect values in here.\n# However, the script will attempt to fall back to sensible defaults if it can't read your values.\n# If your setting appears to not be read by the tool, this is probably the reason!\n# Run `gogadget set-defaults --factory` (without quotes) to reset this file if you run into errors or unexplained behaviour\n\n[general]\n# language and language_for_translations either be a valid two letter language code or be set to \"\". \n# Valid examples:\n#       language = \"en\"\n#       language = \"\"\n# For a list of supported languages, please see the readme or run `gogadget list-languages` (without quotes)\n#\n# output_directory needs to be a valid folder on your system.\n# You can use a dot \".\" if you want to use the current directory that you are running commands from.\n# Windows paths need to have backslashes replaced with double backslashes, see [instructions] at the top of this file.\n# The tool will try to fix it if you forget but it's best to get it correct to begin with!\n# Valid examples:\n#       output_directory = \"\"                         # No default, you will have to specify when running the command\n#       output_directory = \".\"                        # The outputs of the command will be written to the current folder\n#       output_directory = \"immersion_videos\"         # Outputs will be written to a sub folder called \"immersion_videos\"\n#       output_directory = \"C:\\\\immersion_videos\\\\\"   # Outputs will be written to a specific folder on the C:\\ drive\n\nlanguage = \"\"\nlanguage_for_translations = \"en\"\noutput_directory = \".\"\n\n[external_resources]\n# These can be set to \"\" if you don't want to use them or want to specify them every time.\n# Windows paths need to have backslashes replaced with double backslashes, see [instructions] at the top of this file.\n# The tool will try to fix it if you forget but it's best to get it correct to begin with!\n# Valid examples:\n#       word_exclude_spreadsheet = \"C:\\\\data\\\\exclude.xlsx\"     # This will load a specific spreadsheet\n#       word_exclude_spreadsheet = \"\"                           # Don't use an exclude spreadsheet or only use when specified in the command\n\nword_exclude_spreadsheet = \"\"\ndictionary_file = \"\"\nword_audio_directory = \"\"\n\n[anki]\n# extract_media and include_words_with_no_definition should either be set to \"True\" or \"False\" and MUST be wrapped in quotes. \n# Valid examples:\n#       extract_media = \"True\"\n#       include_words_with_no_definition = \"False\"\n#\n# subs_offset_ms, subs_buffer_ms and max_cards_in_deck should be a number wrapped in quotes. \n# Valid examples:\n#       subs_offset_ms = \"0\"\n#       subs_buffer_ms = \"50\"\n\nextract_media = \"True\"\ninclude_words_with_no_definition = \"True\"\nsubs_offset_ms = \"0\"\nsubs_buffer_ms = \"50\"\nmax_cards_in_deck = \"100\"\n\n[lemmatiser]\n# All values should be set to \"True\" or \"False\" and MUST be wrapped in quotes.\n# Valid examples:\n#       lemmatise = \"True\"\n#       lemmatise = \"False\"\n\nlemmatise = \"True\"\nfilter_out_non_alpha = \"True\"\nfilter_out_stop_words = \"True\"\nconvert_input_to_lower = \"True\"\nconvert_output_to_lower = \"True\"\nreturn_just_first_word_of_lemma = \"True\"\n\n[downloader]\n# These should either wrapped in quotes or set to double quotes to leave it blank. \n# Valid examples:\n#       format = \"best[ext=mp4]\"\n#       format = \"\"\n\nadvanced_options = \"\"\nformat = \"\"\nsubtitle_language = \"\"\n\n[transcriber]\n# whisper_use_gpu should either be set to \"True\" or \"False\" and MUST be wrapped in quotes. \n# Valid examples:\n#       whisper_use_gpu = \"False\"\n#       whisper_use_gpu = \"True\"\n#\n# max_subtitle_length and subtitle_split_threshold should be a number wrapped in quotes. \n# Valid examples:\n#       max_subtitle_length = \"100\"\n#\n# The other settings should be text wrapped in quotes or be set to \"\" if you want to specify them each time.\n# These settings are best left alone unless you know what you are doing! Valid examples:\n#       whisper_model = \"small\"\n#       alignment_model = \"\"\n\nwhisper_model = \"deepdml/faster-whisper-large-v3-turbo-ct2\"\nalignment_model = \"\"\nsubtitle_format = \"vtt\"\nmax_subtitle_length = \"94\"\nsubtitle_split_threshold = \"70\"\nwhisper_use_gpu = \"False\"\n</code></pre>"}]}